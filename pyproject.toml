[project]
name = "invenio-record-importer-kcworks"
version = "0.4.0"
description = "Bulk import records into a InvenioRDM instance configured for Knowledge Commons Works"
readme = "README.md"
license = "MIT"
authors = [{ name = "Mesh Research", email = "scottia4@msu.edu" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
keywords = [
  "invenio",
  "invenio-rdm",
  "knowledge-commons-works",
  "bulk-import",
  "record-importer",
  ]

requires-python = ">=3.9"
dependencies = [
  'click',
  'halo',
  'invenio-app-rdm[opensearch2]<13.0.0',
  'invenio-communities',
  'invenio-group-collections-kcworks',
  'invenio-rdm-records',
  'invenio-records-resources',
  'invenio-remote-user-data-kcworks',
  'invenio-saml',
  'invenio-utilities-tuw',
  'isbnlib',
  'jsonlines',
  'langdetect ',
  'pydantic',
  'pytest',
  'python-dateutil',
  'python-iso639',
  'python-stdnum',
  'pytz',
  'requests',
  'timefhuman',
  'titlecase',
  'unidecode',
  'validators',
  ]

[tool.uv.sources]
invenio-group-collections-kcworks = {path = "invenio_record_importer_kcworks/dependencies/invenio-group-collections-kcworks", editable = true}
invenio-remote-user-data-kcworks = {path = "invenio_record_importer_kcworks/dependencies/invenio-remote-user-data-kcworks", editable = true}

[project.urls]
"Homepage" = "https://github.com/Knowledge-Commons-Works/invenio-record-importer-kcworks"

[project.optional-dependencies]
dev = [
  "bumpver",
  "check-manifest",
  "coverage",
  "docker-services-cli",
  "ipykernel",
  "pip-tools",
  "pytest-invenio==2.2.2",
  "requests-mock",
  "selenium",
  "wheel",
  ]
test = ["coverage", "requests-mock"]

[project.scripts]
importer = "invenio_record_importer_kcworks.cli:cli"

[project.entry-points."invenio_base.apps"]
invenio_record_importer_kcworks = "invenio_record_importer_kcworks.ext:InvenioRecordImporter"

[project.entry-points."invenio_base.api_apps"]
invenio_record_importer_kcworks = "invenio_record_importer_kcworks.ext:InvenioRecordImporter"

[project.entry-points."invenio_base.api_blueprints"]
invenio_record_importer_kcworks = "invenio_record_importer_kcworks.resources:create_api_blueprint"

[project.entry-points."flask.commands"]
importer = "invenio_record_importer_kcworks.cli:cli"

[project.entry-points."invenio_celery.tasks"]
invenio-record-importer-kcworks = "invenio_record_importer_kcworks.tasks"

[tool.pytest.ini_options]
addopts = "--doctest-glob='*.rst' --doctest-modules --ignore=tests/helpers"
testpaths = ["tests", "invenio_record_importer_kcworks"]
plugins = [
  "tests.fixtures.communities",
  "tests.fixtures.metadata_fields",
  "tests.fixtures.custom_fields",
  "tests.fixtures.identifiers",
  "tests.fixtures.records",
  "tests.fixtures.saml",
  "tests.fixtures.stats",
  "tests.fixtures.users",
  "tests.fixtures.vocabularies.affiliations",
  "tests.fixtures.vocabularies.community_types",
  "tests.fixtures.vocabularies.date_types",
  "tests.fixtures.vocabularies.descriptions",
  "tests.fixtures.vocabularies.languages",
  "tests.fixtures.vocabularies.licenses",
  "tests.fixtures.vocabularies.resource_types",
  "tests.fixtures.vocabularies.roles",
  "tests.fixtures.vocabularies.subjects",
]

[tool.check-manifest]
ignore = [
  "PKG-INFO",
  ".egg-info",
  ".egg-info/*",
  "setup.cfg",
  ".DS_Store",
  ".hgtags",
  ".hgsigs",
  ".hgignore",
  ".gitignore",
  ".bzrignore",
  ".gitattributes",
  ".gitmodules",
  ".github/*",
  ".travis.yml",
  "Jenkinsfile",
  "* .mo",
  "dist/*",
  "build/*",
  ".venv/*",
  "*.pyc",
  "__pycache__/*",
  # Ignore submodule directories so check-manifest doesn't require their contents
  "invenio_record_importer_kcworks/dependencies",
  "invenio_record_importer_kcworks/dependencies/*",
  "invenio_record_importer_kcworks/dependencies/*/*",
  "invenio_record_importer_kcworks/dependencies/*/*/*",
  ".vscode/*",
]

# [tool.setuptools]
# If there are data files included in your packages that need to be
# installed, specify them here.
# package-data = {"sample" = ["*.dat"]}

[tool.bumpver]
current_version = "0.4.0"
version_pattern = "MAJOR.MINOR.PATCH[-TAGNUM]"
commit_message = "bump version {old_version} -> {new_version}"
tag_message = "{new_version}"
tag_scope = "default"
pre_commit_hook = ""
post_commit_hook = ""
commit = false
tag = false
push = false

[tool.bumpver.file_patterns]
"pyproject.toml" = [
    'version = "{version}"',
    'current_version = "{version}"',
]
"README.md" = [
    "Version {version}",
]
"VERSION" = [
    '^"{version}"',
]
"invenio_record_importer_kcworks/__init__.py" = [
    '^__version__ = "{version}"',
]

[tool.pylsp-mypy]
enabled = true
live_mode = true
strict = false
overrides = [
    "--ignore-missing-imports",
    "--follow-imports=silent",
    "--show-error-codes",
    "--no-error-summary"
]

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "I", "B", "UP", "D", "DOC"]
ignore = [
    "W1",   # Indentation warnings
    "W2",   # Whitespace warnings
    "W3",   # Blank line warnings
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D104", "E402"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.12"
ignore_missing_imports = true
follow_imports = "skip"

[build-system]
requires = ["setuptools>=61.0.0", "wheel", "build"]
build-backend = "setuptools.build_meta"

